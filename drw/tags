!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
ADDR_IGNORE	sockets.h	78;"	d
CC	Makefile	/^CC := gcc$/;"	m
CFLAGS	Makefile	/^CFLAGS := -g -Wall$/;"	m
CSMSECTIMEOUT	r_data.c	15;"	d	file:
CSMSECTIMEOUT	w_data.c	16;"	d	file:
DATA_PATH	config.h	8;"	d
DEFAULT_BUFFSIZE	con_ser.c	15;"	d	file:
DEFAULT_GROUP	config.h	11;"	d
DEFAULT_USER	config.h	14;"	d
EINPROGRESS	sockets.c	33;"	d	file:
ETC_PATH	config.h	17;"	d
GET16BIT	data_pack.h	49;"	d
GET32BIT	data_pack.h	43;"	d
GET64BIT	data_pack.h	36;"	d
GET8BIT	data_pack.h	54;"	d
HAVE_ARPA_INET_H	config.h	20;"	d
HAVE_BZERO	config.h	23;"	d
HAVE_DIRENT_H	config.h	27;"	d
HAVE_DUP2	config.h	30;"	d
HAVE_FCNTL_H	config.h	33;"	d
HAVE_FORK	config.h	36;"	d
HAVE_FTRUNCATE	config.h	39;"	d
HAVE_GETHOSTBYNAME	config.h	42;"	d
HAVE_GETTIMEOFDAY	config.h	45;"	d
HAVE_INTTYPES_H	config.h	48;"	d
HAVE_LIMITS_H	config.h	51;"	d
HAVE_MALLOC	config.h	59;"	d
HAVE_MEMORY_H	config.h	62;"	d
HAVE_MEMSET	config.h	65;"	d
HAVE_MKDIR	config.h	68;"	d
HAVE_NETDB_H	config.h	74;"	d
HAVE_NETINET_IN_H	config.h	77;"	d
HAVE_REALLOC	config.h	81;"	d
HAVE_REALPATH	config.h	84;"	d
HAVE_SELECT	config.h	87;"	d
HAVE_SOCKET	config.h	90;"	d
HAVE_STDBOOL_H	config.h	97;"	d
HAVE_STDINT_H	config.h	100;"	d
HAVE_STDLIB_H	config.h	103;"	d
HAVE_STRCHR	config.h	106;"	d
HAVE_STRDUP	config.h	109;"	d
HAVE_STRERROR	config.h	112;"	d
HAVE_STRINGS_H	config.h	115;"	d
HAVE_STRING_H	config.h	118;"	d
HAVE_STRTOL	config.h	121;"	d
HAVE_STRTOUL	config.h	124;"	d
HAVE_STRUCT_DIRENT_D_TYPE	config.h	127;"	d
HAVE_STRUCT_STAT_ST_BLOCKS	config.h	130;"	d
HAVE_STRUCT_STAT_ST_RDEV	config.h	133;"	d
HAVE_STRUCT_TM_TM_GMTOFF	config.h	136;"	d
HAVE_ST_BLOCKS	config.h	140;"	d
HAVE_SYSLOG_H	config.h	143;"	d
HAVE_SYS_SELECT_H	config.h	154;"	d
HAVE_SYS_SOCKET_H	config.h	157;"	d
HAVE_SYS_STATVFS_H	config.h	160;"	d
HAVE_SYS_STAT_H	config.h	163;"	d
HAVE_SYS_TIME_H	config.h	166;"	d
HAVE_SYS_TYPES_H	config.h	169;"	d
HAVE_SYS_WAIT_H	config.h	172;"	d
HAVE_UNISTD_H	config.h	175;"	d
HAVE_VFORK	config.h	178;"	d
HAVE_WORKING_FORK	config.h	184;"	d
HAVE_WORKING_VFORK	config.h	187;"	d
HAVE__BOOL	config.h	190;"	d
INADDR_NONE	sockets.c	49;"	d	file:
LIBS	Makefile	/^LIBS := -pthread -lreadline$/;"	m
LSTAT_FOLLOWS_SLASHED_SYMLINK	config.h	194;"	d
MAX_CMD_ARG_NUM	drw.c	18;"	d	file:
MAX_NAME_LEN	con_ser.c	18;"	d	file:
OBJ	Makefile	/^OBJ	:=$(patsubst %.c, %.o, $(wildcard *.c))$/;"	m
PACKAGE	config.h	200;"	d
PACKAGE_BUGREPORT	config.h	203;"	d
PACKAGE_NAME	config.h	206;"	d
PACKAGE_STRING	config.h	209;"	d
PACKAGE_TARNAME	config.h	212;"	d
PACKAGE_VERSION	config.h	215;"	d
PREFIX	config.h	218;"	d
PUT16BIT	data_pack.h	25;"	d
PUT32BIT	data_pack.h	16;"	d
PUT64BIT	data_pack.h	4;"	d
PUT8BIT	data_pack.h	31;"	d
RECEIVE_TIMEOUT	con_ser.c	16;"	d	file:
RETRIES	con_ser.c	17;"	d	file:
RETRIES	r_data.c	14;"	d	file:
RETRIES	w_data.c	15;"	d	file:
RUN_PATH	config.h	221;"	d
SELECT_TYPE_ARG1	config.h	224;"	d
SELECT_TYPE_ARG234	config.h	227;"	d
SELECT_TYPE_ARG5	config.h	230;"	d
STDC_HEADERS	config.h	233;"	d
TARGET	Makefile	/^TARGET := drw$/;"	m
TIME_WITH_SYS_TIME	config.h	236;"	d
VERSION	config.h	242;"	d
VERSMAJ	con_ser.c	11;"	d	file:
VERSMAJ	config.h	245;"	d
VERSMID	con_ser.c	12;"	d	file:
VERSMID	config.h	248;"	d
VERSMIN	con_ser.c	13;"	d	file:
VERSMIN	config.h	251;"	d
_DATA_PACK_H_	data_pack.h	2;"	d
_FS_OPERATION_H_	fs_operation.h	2;"	d
_GNU_SOURCE	drw.c	1;"	d	file:
_R_DATA_H_	r_data.h	2;"	d
_SER_H_	con_ser.h	2;"	d
_SOCKETS_H_	sockets.h	20;"	d
_W_DATA_H_	w_data.h	2;"	d
_completion	drw.c	/^static char **_completion (const char *text, int start_pos, int end_pos __attribute ((unused)))$/;"	f	file:
_func	drw.c	/^typedef	int (*_func)(int argc,char *argv[]);$/;"	t	file:
_list_cmds	drw.c	/^static char *_list_cmds (const char *text, int state)$/;"	f	file:
_threc	con_ser.c	/^typedef struct _threc {$/;"	s	file:
addrlen	sockets.c	/^static uint32_t addrlen = 0;$/;"	v	file:
addrmax	sockets.c	/^static uint32_t addrmax = 0;$/;"	v	file:
addrtab	sockets.c	/^static struct sockaddr_in *addrtab=NULL;$/;"	v	typeref:struct:sockaddr_in	file:
amutex	sockets.c	/^static pthread_mutex_t amutex = PTHREAD_MUTEX_INITIALIZER;$/;"	v	file:
buff	con_ser.c	/^	uint8_t *buff;$/;"	m	struct:_threc	file:
buffsize	con_ser.c	/^	uint32_t buffsize;$/;"	m	struct:_threc	file:
close_service	con_ser.c	/^void close_service()$/;"	f
cmd	con_ser.c	/^	uint32_t cmd;$/;"	m	struct:_threc	file:
cmd_msg	drw.c	/^        char   *cmd_msg;$/;"	m	struct:command	file:
command	drw.c	/^struct command$/;"	s	file:
command_table	drw.c	/^struct command command_table[] = {$/;"	v	typeref:struct:command
cond	con_ser.c	/^	pthread_cond_t cond;$/;"	m	struct:_threc	file:
connect_ser	con_ser.c	/^void connect_ser()$/;"	f
cuid	con_ser.c	/^static uint32_t cuid;$/;"	v	file:
direct_readblock	r_data.c	/^uint32_t direct_readblock(uint8_t *name, const char *dest_path, uint16_t nleng, uint32_t size)$/;"	f
direct_writeblock	w_data.c	/^uint32_t direct_writeblock(const char *src_path, uint64_t chunkid, uint64_t *t_size)$/;"	f
disconnect	con_ser.c	/^static int disconnect;$/;"	v	file:
drw_history	drw.c	17;"	d	file:
fd	con_ser.c	/^static int fd;$/;"	v	file:
fdlock	con_ser.c	/^static pthread_mutex_t fdlock;$/;"	v	file:
fs_buffer_init	con_ser.c	/^void fs_buffer_init(threc *rec,uint32_t size) {$/;"	f
fs_creat_file	con_ser.c	/^uint8_t fs_creat_file(uint16_t path_len, uint8_t *name,uint32_t *inode)$/;"	f
fs_createpacket	con_ser.c	/^uint8_t* fs_createpacket(threc *rec,uint32_t cmd,uint32_t size) {$/;"	f
fs_get_my_threc	con_ser.c	/^threc* fs_get_my_threc() {$/;"	f
fs_get_threc_by_id	con_ser.c	/^threc* fs_get_threc_by_id(uint32_t packetid) {$/;"	f
fs_getattr	con_ser.c	/^uint8_t fs_getattr(uint32_t inode,uint8_t attr[35]) {$/;"	f
fs_getdir	con_ser.c	/^uint8_t fs_getdir(uint32_t inode,uint32_t uid,uint32_t gid,uint8_t **dbuff,uint32_t *dbuffsize) {$/;"	f
fs_info	con_ser.c	/^uint8_t fs_info(uint32_t inode,uint32_t uid,uint32_t gid,uint8_t **dbuff,uint32_t *dbuffsize) $/;"	f
fs_judge_name	con_ser.c	/^uint8_t fs_judge_name(uint16_t path_len, uint8_t *name,uint32_t *inode)$/;"	f
fs_lookup	con_ser.c	/^uint8_t fs_lookup(uint32_t parent,uint8_t nleng,const uint8_t *name,uint32_t uid,uint32_t gid,uint32_t *inode,uint8_t attr[35]) {$/;"	f
fs_readchunk	con_ser.c	/^uint8_t fs_readchunk(uint32_t inode,uint32_t indx,uint64_t *chunkid,$/;"	f
fs_sendandreceive	con_ser.c	/^uint8_t* fs_sendandreceive(threc *rec,uint32_t command_info,uint32_t *info_length) {$/;"	f
fs_statfs	con_ser.c	/^void fs_statfs(uint64_t *totalspace,uint64_t *availspace,uint64_t *trashspace,$/;"	f
fs_writechunk	con_ser.c	/^uint8_t fs_writechunk(uint32_t *ip,uint16_t *port, uint64_t *chunkid,$/;"	f
fs_writechunk_end	con_ser.c	/^uint8_t fs_writechunk_end(uint32_t inode, uint32_t indx, uint64_t size) $/;"	f
func	drw.c	/^        _func   func;$/;"	m	struct:command	file:
func_log_begin	drw.c	/^int func_log_begin (int argc, char **argv)$/;"	f
func_log_end	drw.c	/^int func_log_end (const char *msg)$/;"	f
get_file_size	w_data.c	/^uint64_t get_file_size(const char *path)$/;"	f
get_inode_by_name	r_data.c	/^static uint32_t get_inode_by_name(const char *src)$/;"	f	file:
get_inode_by_name	w_data.c	/^static uint32_t get_inode_by_name(const char *src)$/;"	f	file:
globaladdr	sockets.c	/^static int32_t globaladdr = -1;$/;"	v	file:
gmutex	sockets.c	/^static pthread_mutex_t gmutex = PTHREAD_MUTEX_INITIALIZER;$/;"	v	file:
help	drw.c	/^int help(int argc,char *argv[])$/;"	f
hmutex	sockets.c	/^static pthread_mutex_t hmutex = PTHREAD_MUTEX_INITIALIZER;$/;"	v	file:
int16_t	sockets.h	/^typedef __int16 int16_t;$/;"	t
int32_t	sockets.h	/^typedef __int32 int32_t;$/;"	t
int8_t	sockets.h	/^typedef __int8 int8_t;$/;"	t
ip	con_ser.c	/^static char *ip;$/;"	v	file:
list_fs	fs_operation.c	/^int list_fs(int argc, char **argv)$/;"	f
list_fs_info	fs_operation.c	/^int8_t list_fs_info(uint8_t m_inode, uint8_t m_hide)$/;"	f
list_fs_usage	fs_operation.c	/^void list_fs_usage(const char *name)$/;"	f
list_fs_volume	fs_operation.c	/^int8_t list_fs_volume()$/;"	f
list_volume	fs_operation.c	/^int list_volume(int argc, char **argv)$/;"	f
list_volume_usage	fs_operation.c	/^void list_volume_usage(const char *name)$/;"	f
main	drw.c	/^int main(int argc, char **argv)$/;"	f
main_lock	drw.c	/^pthread_mutex_t main_lock;$/;"	v
mutex	con_ser.c	/^	pthread_mutex_t mutex;$/;"	m	struct:_threc	file:
name	drw.c	/^        char   *name;$/;"	m	struct:command	file:
next	con_ser.c	/^	struct _threc *next;$/;"	m	struct:_threc	typeref:struct:_threc::_threc	file:
packetid	con_ser.c	/^	uint32_t packetid;$/;"	m	struct:_threc	file:
port	con_ser.c	/^static char *port;$/;"	v	file:
quit	drw.c	/^int quit(int argc,char *argv[])$/;"	f
read_data	r_data.c	/^int read_data(const char *src, const char *dest) $/;"	f
read_data_refresh_connection	r_data.c	/^static int read_data_refresh_connection(uint32_t inode, uint32_t indx, uint64_t *chunkid, uint64_t *size)$/;"	f	file:
read_data_usage	fs_operation.c	/^void read_data_usage(const char *name)$/;"	f
read_fs_data	fs_operation.c	/^int read_fs_data(int argc, char **argv)$/;"	f
receive_thread	con_ser.c	/^void *receive_thread(void *arg)$/;"	f
release	con_ser.c	/^	uint8_t release;$/;"	m	struct:_threc	file:
rthid	con_ser.c	/^static pthread_t rthid;$/;"	v	file:
run_command	drw.c	/^int run_command (int argc, char *argv[])$/;"	f
rw_sock	r_data.c	/^static int rw_sock = -1;$/;"	v	file:
rw_sock	w_data.c	/^static int rw_sock = -1;$/;"	v	file:
sent	con_ser.c	/^	uint8_t sent;$/;"	m	struct:_threc	file:
ser_init	con_ser.c	/^void ser_init(char *_ip, char *_port)$/;"	f
size	con_ser.c	/^	uint32_t size;$/;"	m	struct:_threc	file:
sockaddrchange	sockets.c	/^int sockaddrchange(uint32_t i,const char *hostname,const char *service,const char *proto) {$/;"	f
sockaddrconvert	sockets.c	/^int sockaddrconvert(const char *hostname,const char *service,const char *proto,uint32_t *ip,uint16_t *port) {$/;"	f
sockaddrget	sockets.c	/^int sockaddrget(uint32_t i,uint32_t *ip,uint16_t *port) {$/;"	f
sockaddrnew	sockets.c	/^int sockaddrnew(const char *hostname,const char *service,const char *proto) {$/;"	f
sockaddrnewempty	sockets.c	/^int32_t sockaddrnewempty() {$/;"	f
sockaddrnumchange	sockets.c	/^int sockaddrnumchange(uint32_t i,uint32_t ip,uint16_t port) {$/;"	f
socklen_t	sockets.h	/^typedef int socklen_t;$/;"	t
socknonblock	sockets.c	/^int socknonblock(int sock) {$/;"	f
status	con_ser.c	/^	uint8_t status;$/;"	m	struct:_threc	file:
tcpaccept	sockets.c	/^int tcpaccept(int lsock) {$/;"	f
tcpaccfdata	sockets.c	/^int tcpaccfdata(int sock) {$/;"	f
tcpaccfhttp	sockets.c	/^int tcpaccfhttp(int sock) {$/;"	f
tcpaddrconnect	sockets.c	/^int tcpaddrconnect(int sock,uint32_t addr) {$/;"	f
tcpaddrconvert	sockets.h	52;"	d
tcpaddrlisten	sockets.c	/^int tcpaddrlisten(int sock,uint32_t addr,uint16_t queue) {$/;"	f
tcpclose	sockets.c	/^int tcpclose(int sock) {$/;"	f
tcpconnect	sockets.c	/^int tcpconnect(int sock,const char *hostname,const char *service) {$/;"	f
tcpgetpeer	sockets.c	/^int tcpgetpeer(int sock,uint32_t *ip,uint16_t *port) {$/;"	f
tcpgetstatus	sockets.c	/^int tcpgetstatus(int sock) {$/;"	f
tcplisten	sockets.c	/^int tcplisten(int sock,const char *hostname,const char *service,uint16_t queue) {$/;"	f
tcpnodelay	sockets.c	/^int tcpnodelay(int sock) {$/;"	f
tcpnonblock	sockets.h	53;"	d
tcpnumconnect	sockets.c	/^int tcpnumconnect(int sock,uint32_t ip,uint16_t port) {$/;"	f
tcpnumlisten	sockets.c	/^int tcpnumlisten(int sock,uint32_t ip,uint16_t port,uint16_t queue) {$/;"	f
tcpread	sockets.c	/^int32_t tcpread(int sock,void *buff,uint32_t leng) {$/;"	f
tcpreuseaddr	sockets.c	/^int tcpreuseaddr(int sock) {$/;"	f
tcpsocket	sockets.c	/^int tcpsocket(void) {$/;"	f
tcptoread	sockets.c	/^int32_t tcptoread(int sock,void *buff,uint32_t leng,uint32_t msecto) {$/;"	f
tcptowrite	sockets.c	/^int32_t tcptowrite(int sock,const void *buff,uint32_t leng,uint32_t msecto) {$/;"	f
tcpwrite	sockets.c	/^int32_t tcpwrite(int sock,const void *buff,uint32_t leng) {$/;"	f
thid	con_ser.c	/^	pthread_t thid;$/;"	m	struct:_threc	file:
threc	con_ser.c	/^} threc;$/;"	t	typeref:struct:_threc	file:
threc_head	con_ser.c	/^static threc *threc_head = NULL;$/;"	v	file:
translate_size	fs_operation.c	/^void translate_size(uint64_t size) $/;"	f
udpaddrconvert	sockets.h	81;"	d
udpaddrlisten	sockets.c	/^int udpaddrlisten(int sock,uint32_t addr) {$/;"	f
udpclose	sockets.c	/^int udpclose(int sock) {$/;"	f
udplisten	sockets.c	/^int udplisten(int sock,const char *hostname,const char *service) {$/;"	f
udpnonblock	sockets.h	82;"	d
udpnumlisten	sockets.c	/^int udpnumlisten(int sock,uint32_t ip,uint16_t port) {$/;"	f
udpread	sockets.c	/^int udpread(int sock,uint32_t addr,void *buff,uint16_t leng) {$/;"	f
udpsocket	sockets.c	/^int udpsocket(void) {$/;"	f
udpwrite	sockets.c	/^int udpwrite(int sock,uint32_t addr,const void *buff,uint16_t leng) {$/;"	f
uint16_t	sockets.h	/^typedef unsigned __int16 uint16_t;$/;"	t
uint32_t	sockets.h	/^typedef unsigned __int32 uint32_t;$/;"	t
uint8_t	sockets.h	/^typedef unsigned __int8 uint8_t;$/;"	t
version	drw.c	/^int version(int argc,char *argv[])$/;"	f
write_data	w_data.c	/^int write_data(const char *src, const char *dest) $/;"	f
write_data_refresh_connection	w_data.c	/^static int write_data_refresh_connection(uint32_t inode, uint32_t indx, uint64_t *chunkid)$/;"	f	file:
write_data_usage	fs_operation.c	/^void write_data_usage(const char *name)$/;"	f
write_fs_data	fs_operation.c	/^int write_fs_data(int argc, char **argv)$/;"	f
